var StarRtc = window.NameSpace || {};
if (void 0 === APP_PRODUCT_ID) var i = 0,
    APP_PRODUCT_ID = {R: i++, O: i++, t: i++, _: i++, s: i++, S: i++, i: i++, N: i++, I: i++, o: i++, A: i++};
if (void 0 === ACTION_GROUP_ID) {
    i = 0;
    var ACTION_GROUP_ID = {V: i++, M: i++, C: i++, P: i++, u: i++, T: i++}
}
if (void 0 === MSG_TYPE) {
    i = 0;
    var MSG_TYPE = {L: i++, G: i++, l: i++, D: i++, p: i++}
}
if (void 0 === MSG_DATA_TYPE) {
    i = 0;
    var MSG_DATA_TYPE = {U: i++, v: i++, k: i++, H: i++}
}
if (void 0 === ENCRYPT_TYPE) {
    i = 0;
    var ENCRYPT_TYPE = {g: i++, m: i++}
}
if (void 0 === AG_MSG_VOIP_CTRL) var AG_MSG_VOIP_CTRL = {h: 1e3, Y: 1100, F: 1001, W: 1002, K: 1003, B: 1004};
if (void 0 === AG_MSG) {
    i = 0;
    var AG_MSG = {
        J: i++,
        j: i++,
        X: i++,
        $: i++,
        q: i++,
        Z: i++,
        ee: i++,
        Re: i++,
        Ee: i++,
        Oe: i++,
        te: i++,
        _e: i++,
        ae: i++,
        re: i++,
        ne: i++,
        se: i++,
        ce: i++,
        Se: i++,
        ie: i++,
        Ne: i++,
        Ie: i++,
        oe: i++,
        Ae: i++,
        Ve: i++,
        Me: i++,
        Ce: i++,
        Pe: i++,
        ue: i++,
        Te: i++,
        Le: i++,
        Ge: i++,
        le: i++,
        fe: i++,
        De: i++,
        pe: i++,
        Ue: i++
    }
}
if (void 0 === CHAT_ROOM_TYPE) {
    i = 1;
    var CHAT_ROOM_TYPE = {ve: i++, de: i++}
}
if (void 0 === AG_CHATROOMMOONSERVER) {
    i = 0;
    var AG_CHATROOMMOONSERVER = {
        be: i++,
        ke: i++,
        He: i++,
        ge: i++,
        me: i++,
        ye: i++,
        we: i++,
        he: i++,
        Ye: i++,
        xe: i++,
        Fe: i++,
        We: i++,
        Ke: i++,
        Be: i++,
        Je: i++,
        Qe: i++,
        je: i++,
        Xe: i++,
        $e: i++,
        qe: i++,
        ze: i++,
        Ze: i++,
        eR: i++,
        RR: i++,
        ER: i++,
        OR: i++,
        tR: i++,
        _R: i++,
        aR: i++,
        rR: i++,
        nR: i++,
        sR: i++,
        cR: i++,
        SR: i++,
        iR: i++,
        NR: i++,
        IR: i++
    }
}
if (void 0 === AG_VOIPMOONSERVER) {
    i = 0;
    var AG_VOIPMOONSERVER = {
        oR: i++,
        AR: i++,
        VR: i++,
        MR: i++,
        CR: i++,
        PR: i++,
        uR: i++,
        TR: i++,
        LR: i++,
        GR: i++,
        lR: i++,
        fR: i++,
        DR: i++,
        pR: i++,
        UR: i++,
        vR: i++,
        dR: i++,
        bR: i++,
        kR: i++,
        HR: i++,
        gR: i++,
        mR: i++,
        yR: i++,
        wR: i++,
        hR: i++,
        YR: i++,
        xR: i++,
        FR: i++,
        WR: i++,
        KR: i++,
        BR: i++,
        JR: i++,
        QR: i++,
        jR: i++,
        XR: i++,
        $R: i++,
        qR: i++,
        zR: i++,
        ZR: i++
    }
}
if (void 0 === AG_LIVESRCMOONSERVER) {
    i = 0;
    var AG_LIVESRCMOONSERVER = {
        eE: i++,
        RE: i++,
        EE: i++,
        OE: i++,
        tE: i++,
        _E: i++,
        aE: i++,
        rE: i++,
        nE: i++,
        sE: i++,
        cE: i++,
        SE: i++,
        iE: i++,
        NE: i++,
        IE: i++,
        oE: i++,
        AE: i++,
        VE: i++,
        ME: i++,
        CE: i++,
        PE: i++,
        uE: i++,
        TE: i++,
        LE: i++,
        GE: i++,
        lE: i++,
        fE: i++,
        DE: i++,
        pE: i++,
        UE: i++,
        vE: i++,
        dE: i++,
        bE: i++,
        kE: i++,
        HE: i++,
        gE: i++,
        mE: i++,
        yE: i++,
        wE: i++,
        hE: i++,
        YE: i++,
        xE: i++,
        FE: i++,
        WE: i++,
        KE: i++,
        BE: i++,
        JE: i++,
        QE: i++,
        jE: i++,
        XE: i++,
        $E: i++,
        qE: i++,
        zE: i++,
        ZE: i++,
        eO: i++,
        RO: i++,
        EO: i++,
        OO: i++,
        tO: i++,
        _O: i++,
        aO: i++,
        rO: i++,
        nO: i++
    }
}
if (void 0 === AG_LIVEVDNMOONSERVER) {
    i = 0;
    var AG_LIVEVDNMOONSERVER = {
        sO: i++,
        cO: i++,
        SO: i++,
        iO: i++,
        NO: i++,
        IO: i++,
        oO: i++,
        AO: i++,
        VO: i++,
        MO: i++,
        CO: i++,
        PO: i++,
        uO: i++,
        TO: i++,
        LO: i++,
        GO: i++,
        lO: i++,
        fO: i++,
        DO: i++,
        pO: i++,
        UO: i++,
        vO: i++,
        dO: i++
    }
}

function clone(e) {
    if (null == e || "object" != typeof e) return e;
    if (e instanceof Date) return (R = new Date).setTime(e.getTime()), R;
    if (e instanceof Array) {
        for (var R = [], E = e.length, O = 0; O < E; ++O) R[O] = clone(e[O]);
        return R
    }
    if (e instanceof Object) {
        R = {};
        for (var t in e) e.hasOwnProperty(t) && (R[t] = clone(e[t]));
        return R
    }
    throw new Error("Unable to copy obj! Its type isn't supported.")
}

StarRtc.AUtils = new function () {
    var N, I = this, f = "", U = "", v = "", d = "";

    function C(e, R) {
        for (var E = k(e), O = H(D(E.length.toString(16))), t = k(R), _ = H(D(t.length.toString(16))), a = new Uint8Array(E.length + t.length + 8), r = 0, n = O.length, s = r; s < n; s++) a[s] = O[s - r];
        n = (r = n) + E.length;
        for (s = r; s < n; s++) a[s] = E[s - r];
        n = (r = n) + _.length;
        for (s = r; s < n; s++) a[s] = _[s - r];
        n = (r = n) + t.length;
        for (s = r; s < n; s++) a[s] = t[s - r];
        return a
    }

    function o(e) {
        var R = new Uint8Array(e), E = 0, O = parseInt("0x" + M(R.slice(E, E + 4)));
        E += 4;
        var t = V(R.slice(E, E + O));
        E += O;
        var _ = parseInt("0x" + M(R.slice(E, E + 4)));
        return E += 4, {digest: t, content: V(R.slice(E, E + _))}
    }

    function D(e) {
        var R = 8 - e.length;
        return "00000000".substr(0, R) + e
    }

    function b(e) {
        var R = 4 - e.length;
        return "0000".substr(0, R) + e
    }

    function A(e, R) {
        var E = new Array(e + 1).join("0"), O = e - R.length;
        return E.substr(0, O) + R
    }

    function k(e) {
        var R, E, O = new Array;
        R = e.length;
        for (var t = 0; t < R; t++) 65536 <= (E = e.charCodeAt(t)) && E <= 1114111 ? (O.push(E >> 18 & 7 | 240), O.push(E >> 12 & 63 | 128), O.push(E >> 6 & 63 | 128), O.push(63 & E | 128)) : 2048 <= E && E <= 65535 ? (O.push(E >> 12 & 15 | 224), O.push(E >> 6 & 63 | 128), O.push(63 & E | 128)) : 128 <= E && E <= 2047 ? (O.push(E >> 6 & 31 | 192), O.push(63 & E | 128)) : O.push(255 & E);
        return O
    }

    function V(e) {
        if ("string" == typeof e) return e;
        for (var R = "", E = e, O = 0; O < E.length; O++) {
            var t = E[O].toString(2), _ = t.match(/^1+?(?=0)/);
            if (_ && 8 == t.length) {
                for (var a = _[0].length, r = E[O].toString(2).slice(7 - a), n = 1; n < a; n++) r += E[n + O].toString(2).slice(2);
                R += String.fromCharCode(parseInt(r, 2)), O += a - 1
            } else R += String.fromCharCode(E[O])
        }
        return R
    }

    function H(e) {
        var R = 0, E = e.length;
        if (E % 2 != 0) return null;
        E /= 2;
        for (var O = new Array, t = 0; t < E; t++) {
            var _ = e.substr(R, 2), a = parseInt("0x" + _);
            O.push(a), R += 2
        }
        return O
    }

    function M(e) {
        for (var R = "", E = 0; E < e.length; E++) {
            var O = e[E].toString(16);
            1 == O.length && (O = "0" + O), R += O
        }
        return R
    }

    function g(e, R, E) {
        var O = R;
        for (var t in E) for (var _ = E[t], a = 0; a < _.length; a++, O++) e[O] = _[a]
    }

    I.msgMaxLen = 0, I.setUserInfo = function (e, R, E) {
        v = (f = e) + "_" + (U = R), d = E
    }, I.clear = function () {
        d = v = U = f = "", I.msgMaxLen = 0, clearInterval(N)
    }, I.parseProtocol = function (e, c) {
        var R = new Blob([e], {type: "text/plain"}), S = new FileReader;
        S.readAsArrayBuffer(R), S.onload = function (e) {
            var R = new Uint8Array(S.result);
            console.info("parseProtocol:", R);
            var E = R[0], O = R.slice(1, 5), t = R[5], _ = R.slice(6, 8), a = R.slice(8, 10), r = R[10],
                n = R.slice(11, R.byteLength - 2);
            console.info("parseProtocol: msgArr = ", n);
            var s = R.slice(R.byteLength - 2, R.byteLength);
            c({appid: E, plength: O, appver: t, rese1: _, rese2: a, actionid: r, msgArr: n, end: s})
        }
    }, I.packageProtocol = function (e, R, E) {
        var O = e, t = new Array(255, 255), _ = new Array(255, 255), a = R, r = (new Array(18, 52), E),
            n = new Uint8Array(r), s = H(D((r.byteLength + 12).toString(16))), c = new ArrayBuffer(r.byteLength + 13),
            S = new Uint8Array(c);
        S[0] = O;
        for (var i = 1; i < 5; i++) S[i] = s[i - 1];
        S[5] = 1, S[6] = t[0], S[7] = t[1], S[8] = _[0], S[9] = _[1], S[10] = a;
        for (i = 11; i < 11 + n.byteLength; i++) S[i] = n[i - 11];
        return S[11 + n.byteLength] = 18, S[12 + n.byteLength] = 52, console.log("packageProtocol", S), S
    }, I.constructAuthMsg = function () {
        for (var e = H(b(AG_MSG.J.toString(16))), R = k(v), E = H(b(R.length.toString(16))), O = k(d), t = new Uint8Array(R.length + 36), _ = 0, a = e.length, r = _; r < a; r++) t[r] = e[r];
        a = (_ = a) + E.length;
        for (r = _; r < a; r++) t[r] = E[r - _];
        a = (_ = a) + R.length;
        for (r = _; r < a; r++) t[r] = R[r - _];
        a = (_ = a) + O.length;
        for (r = _; r < a; r++) t[r] = O[r - _];
        _ = 0;
        var n = [];
        return n.push(e), n.push(E), n.push(R), n.push(O), g(t, _, n), t
    }, I.constructSingleMsg = function (e, R, E, O, t) {
        var _ = H(b(AG_MSG.Z.toString(16))), a = k(v), r = H(b(a.length.toString(16))), n = k(f + "_" + e),
            s = H(b(n.length.toString(16))), c = H(D(R.toString(16))), S = ENCRYPT_TYPE.g, i = MSG_DATA_TYPE.v;
        null != t && (i = t);
        var N = {fromId: U, targetId: e, time: "0", msgIndex: R, type: 1, code: 0, contentData: O},
            I = C(E, JSON.stringify(N)), o = H(D(I.length.toString(16))),
            A = new Uint8Array(a.length + n.length + I.length + 16), V = [];
        return V.push(_), V.push(r), V.push(a), V.push(s), V.push(n), V.push(c), V.push([S]), V.push([i]), V.push(o), V.push(I), g(A, 0, V), A
    }, I.constructGroupMsg = function (e, R, E, O) {
        var t = H(b(AG_MSG.ne.toString(16))), _ = k(""), a = H(b(_.length.toString(16))), r = H(D(R.toString(16))),
            n = k(f + "_" + e), s = H(b(n.length.toString(16))), c = k(v), S = H(b(c.length.toString(16))),
            i = ENCRYPT_TYPE.g, N = MSG_DATA_TYPE.v,
            I = {fromId: U, targetId: e, time: "0", msgIndex: R, type: 1, code: 0, contentData: O},
            o = C(E, JSON.stringify(I)), A = H(D(o.length.toString(16))),
            V = new Uint8Array(_.length + n.length + c.length + o.length + 18), M = [];
        return M.push(t), M.push(a), M.push(_), M.push(r), M.push(s), M.push(n), M.push(S), M.push(c), M.push([i]), M.push([N]), M.push(A), M.push(o), g(V, 0, M), V
    }, I.constructReceivedMsg = function (e) {
        var R = H(b(AG_MSG.Pe.toString(16))), E = k(v), O = H(b(E.length.toString(16))), t = new Uint8Array(e),
            _ = new Uint8Array(E.length + 12), a = [];
        return a.push(R), a.push(O), a.push(E), a.push(t), g(_, 0, a), _
    }, I.constructSingleCtrlMsg = function (e, R, E, O, t) {
        var _ = H(b(AG_MSG.Z.toString(16))), a = k(v), r = H(b(a.length.toString(16))), n = k(f + "_" + e),
            s = H(b(n.length.toString(16))), c = H(D(R.toString(16))), S = ENCRYPT_TYPE.g, i = MSG_DATA_TYPE.U,
            N = {fromId: U, targetId: e, time: "0", msgIndex: R, type: 0, code: parseInt(t), contentData: O},
            I = C(E, JSON.stringify(N)), o = H(D(I.length.toString(16))),
            A = new Uint8Array(a.length + n.length + I.length + 16), V = [];
        return V.push(_), V.push(r), V.push(a), V.push(s), V.push(n), V.push(c), V.push([S]), V.push([i]), V.push(o), V.push(I), g(A, 0, V), A
    }, I.constructVOIPProtocol = function (e, R) {
        var E, O = [], t = H(b(e.toString(16))), _ = k(v), a = H(b(_.length.toString(16))), r = k(d),
            n = H(b(r.length.toString(16)));
        switch (e) {
            case AG_VOIPMOONSERVER.MR:
            case AG_VOIPMOONSERVER.PR:
                var s = k(f + "_" + R.targetId), c = H(b(s.length.toString(16))),
                    S = H(A(8, parseInt(R.audioSSRC).toString(16))), i = H(A(8, parseInt(R.videoSSRC).toString(16))),
                    N = H(A(2, parseInt(R.videoCodec).toString(16))), I = H(A(2, parseInt(R.audioCodec).toString(16)));
                E = new Uint8Array(2 + (2 + _.length) + (2 + r.length) + (2 + s.length) + 4 + 4 + 1 + 1), O.push(t), O.push(a), O.push(_), O.push(n), O.push(r), O.push(c), O.push(s), O.push(S), O.push(i), O.push(N), O.push(I);
                break;
            case AG_VOIPMOONSERVER.LR:
                var o = R.isActive;
                E = new Uint8Array(3), O.push(t), O.push([o])
        }
        return g(E, 0, O), E
    }, I.constructSrcProtocol = function (e, R) {
        var E, O = [], t = H(b(e.toString(16))), _ = H(b((I = k(v)).length.toString(16))),
            a = H(b((o = k(d)).length.toString(16)));
        switch (e) {
            case AG_LIVESRCMOONSERVER.VE:
            case AG_LIVESRCMOONSERVER.ME:
                var r = H(b(R.conCurrentNum.toString(16))), n = H(b((0).toString(16))),
                    s = H(b((i = k(R.roomId)).length.toString(16))), c = R.liveType,
                    S = H(b((M = k(R.extra)).length.toString(16)));
                E = new Uint8Array(2 + (2 + I.length) + (2 + o.length) + 2 + 2 + (2 + i.length) + 1 + (2 + M.length)), O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(r), O.push(n), O.push(s), O.push(i), O.push([c]), O.push(S), O.push(M);
                break;
            case AG_LIVESRCMOONSERVER.CE:
                r = H(b(R.conCurrentNum.toString(16))), n = H(b(R.validTime.toString(16))), s = H(b((i = k(R.roomId)).length.toString(16))), S = H(b((M = k(R.extra)).length.toString(16)));
                var i, N = H(b((C = k(R.spec)).length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(r), O.push(n), O.push(s), O.push(i), O.push(S), O.push(M), O.push(N), O.push(C);
                break;
            case AG_LIVESRCMOONSERVER.PE:
                t = H(b(e.toString(16))), _ = H(b((I = k(U)).length.toString(16))), a = H(b((o = k(d)).length.toString(16))), n = H(b((0).toString(16)));
                var I, o, A = H(b((V = k(R.groupId)).length.toString(16)));
                S = H(b((M = k(R.extra)).length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(n), O.push(A), O.push(V), O.push(S), O.push(M);
                break;
            case AG_LIVESRCMOONSERVER.uE:
                var V, M, C;
                n = H(b((0).toString(16))), A = H(b((V = k(R.groupId)).length.toString(16))), S = H(b((M = k(R.extra)).length.toString(16))), N = H(b((C = k(R.spec)).length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(n), O.push(A), O.push(V), O.push(S), O.push(M), O.push(N), O.push(C);
                break;
            case AG_LIVESRCMOONSERVER.TE:
                var P = k(R.channelId), u = k(R.avParam), T = H(b(u.length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(P), O.push(T), O.push(u);
                break;
            case AG_LIVESRCMOONSERVER.GE:
                P = k(R.channelId);
                var L = H(b((G = k(R.upUserId)).length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(P), O.push(L), O.push(G);
                break;
            case AG_LIVESRCMOONSERVER.lE:
            case AG_LIVESRCMOONSERVER.fE:
            case AG_LIVESRCMOONSERVER.DE:
                var G;
                P = k(R.channelId), L = H(b((G = k(R.upUserId)).length.toString(16)));
                O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(P), O.push(L), O.push(G);
                break;
            case AG_LIVESRCMOONSERVER.pE:
            case AG_LIVESRCMOONSERVER.UE:
                P = k(R.channelId);
                E = new Uint8Array(2 + (2 + I.length) + (2 + o.length) + 16), O.push(t), O.push(_), O.push(I), O.push(a), O.push(o), O.push(P);
                break;
            case AG_LIVESRCMOONSERVER.vE:
                for (var l = R.streamConfig, f = new Uint8Array(16), D = 0; D < 16; D++) null != l[D] ? f[D] = l[D] : f[D] = 0;
                E = new Uint8Array(18), O.push(t), O.push(f);
                break;
            case AG_LIVESRCMOONSERVER.dE:
                P = k(R.channelId);
                O.push(t), O.push(P);
                break;
            case AG_LIVESRCMOONSERVER.kE:
                O.push(t);
                break;
            case AG_LIVESRCMOONSERVER.bE:
                var p = k(R.streamData);
                E = new Uint8Array(3 + p.length), O.push(t), O.push([R.streamDataType]), O.push(p)
        }
        return g(E, 0, O), E
    }, I.constructVdnProtocol = function (e, R) {
        var E, O = [], t = H(b(e.toString(16))), _ = k(v), a = H(b(_.length.toString(16))), r = k(d),
            n = H(b(r.length.toString(16)));
        switch (e) {
            case AG_LIVEVDNMOONSERVER.SO:
                var s = H(A(8, parseInt(R.ssrc).toString(16))), c = H(A(2, parseInt(R.videoCodec).toString(16))),
                    S = H(A(2, parseInt(R.audioCodec).toString(16)));
                E = new Uint8Array(8), O.push(t), O.push(s), O.push(c), O.push(S);
                break;
            case AG_LIVEVDNMOONSERVER.iO:
                var i = k(R.channelId);
                E = new Uint8Array(18 + (2 + _.length) + (2 + r.length)), O.push(t), O.push(i), O.push(a), O.push(_), O.push(n), O.push(r);
                break;
            case AG_LIVEVDNMOONSERVER.NO:
            case AG_LIVEVDNMOONSERVER.IO:
                E = new Uint8Array(2), O.push(t);
                break;
            case AG_LIVEVDNMOONSERVER.VO:
            case AG_LIVEVDNMOONSERVER.oO:
                i = k(R.channelId);
                E = new Uint8Array(18), O.push(t), O.push(i);
                break;
            case AG_LIVEVDNMOONSERVER.AO:
                for (var N = R.streamConfig, I = new Uint8Array(16), o = 0; o < 16; o++) null != N[o] ? I[o] = N[o] : I[o] = 0;
                E = new Uint8Array(18), O.push(t), O.push(I)
        }
        return g(E, 0, O), E
    }, I.constructChatProtocol = function (e, R) {
        var E, O = [], t = H(b(e.toString(16))), _ = k(v), a = H(b(_.length.toString(16))), r = k(d),
            n = H(b(r.length.toString(16)));
        if (e == AG_CHATROOMMOONSERVER.be) {
            var s = R.roomType, c = H(b(R.conCurrentNum.toString(16))), S = k(R.userDefineData),
                i = H(D(S.length.toString(16)));
            E = new Uint8Array(2 + (2 + _.length) + (2 + r.length) + 1 + 2 + (4 + S.length)), O.push(t), O.push(a), O.push(_), O.push(n), O.push(r), O.push([s]), O.push(c), O.push(i), O.push(S)
        } else if (e == AG_CHATROOMMOONSERVER.ke) E = new Uint8Array(2), O.push(t); else if (e == AG_CHATROOMMOONSERVER.He) {
            var N = k(f + "_" + R.banUserId), I = H(b(N.length.toString(16))), o = H(b(R.banTime.toString(16)));
            E = new Uint8Array(2 + (2 + N.length) + 2), O.push(t), O.push(I), O.push(N), O.push(o)
        } else if (e == AG_CHATROOMMOONSERVER.ge) {
            var A = k(f + "_" + R.kickOutUserId), V = H(b(A.length.toString(16)));
            E = new Uint8Array(2 + (2 + A.length)), O.push(t), O.push(V), O.push(A)
        } else if (e == AG_CHATROOMMOONSERVER.me) E = new Uint8Array(2), O.push(t); else if (e == AG_CHATROOMMOONSERVER.ye) {
            var M = k(R.roomId);
            E = new Uint8Array(2 + (2 + _.length) + (2 + r.length) + 16), O.push(t), O.push(a), O.push(_), O.push(n), O.push(r), O.push(M)
        } else if (e == AG_CHATROOMMOONSERVER.we) ; else if (e == AG_CHATROOMMOONSERVER.he) E = new Uint8Array(2), O.push(t); else if (e == AG_CHATROOMMOONSERVER.Ye) {
            var C = {
                fromId: U,
                targetId: R.roomId,
                time: "0",
                msgIndex: R.msgIndex,
                type: 1,
                code: 0,
                contentData: R.msg
            }, P = k(JSON.stringify(C)), u = H(D(P.length.toString(16)));
            E = new Uint8Array(2 + (4 + P.length)), O.push(t), O.push(u), O.push(P)
        } else if (e == AG_CHATROOMMOONSERVER.xe) {
            C = {
                fromId: U,
                targetId: R.roomId,
                time: "0",
                msgIndex: R.msgIndex,
                type: parseInt(R.type),
                code: parseInt(R.code),
                contentData: R.msg
            };
            var T = k(JSON.stringify(C)), L = H(D(T.length.toString(16))), G = k(f + "_" + R.toUserId),
                l = H(b(G.length.toString(16)));
            E = new Uint8Array(2 + (2 + G.length) + (4 + T.length)), O.push(t), O.push(l), O.push(G), O.push(L), O.push(T)
        } else if (e == AG_CHATROOMMOONSERVER.Fe) {
            M = k(R.roomId);
            E = new Uint8Array(18), O.push(t), O.push(M)
        }
        return g(E, 0, O), E
    }, I.constructWebrtcUploadMsgProtocol = function (e) {
        var R = H(b(AG_LIVESRCMOONSERVER.LE.toString(16))), E = k(v), O = H(b(E.length.toString(16))), t = k(d),
            _ = H(b(t.length.toString(16))), a = k(e.channelId), r = H(A(8, parseInt(e.audioSSRC).toString(16))),
            n = H(A(8, parseInt(e.smallVideoSSRC).toString(16))), s = H(A(8, parseInt(e.bigVideoSSRC).toString(16))),
            c = H(A(2, parseInt(e.videoCodec).toString(16))), S = H(A(2, parseInt(e.audioCodec).toString(16))),
            i = new Uint8Array(E.length + t.length + 34 + 1 + 1);
        return g(i, 0, [R, O, E, _, t, a, r, n, s, c, S]), i
    }, I.parseMessage = function (e) {
        var R, E = new Uint8Array(e);
        switch (parseInt("0x" + M(E.slice(0, 2)))) {
            case AG_MSG.j:
                E = new Uint8Array(e);
                StarRtc.AUtils.msgMaxLen = parseInt("0x" + M(E.slice(2, 4))), console.log("登录成功，最大消息长度：", StarRtc.AUtils.msgMaxLen), StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, I.constructHeartBeatMsg(AG_MSG.$))), N = setInterval(function () {
                    StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, I.constructHeartBeatMsg(AG_MSG.$)))
                }, 15e3), StarRtc.StarManager.getLoginMessage({status: "success"});
                break;
            case AG_MSG.X:
                console.log("登录失败"), StarRtc.StarManager.getLoginMessage({status: "failed"});
                break;
            case AG_MSG.q:
                console.log("心跳反馈");
                break;
            case AG_MSG.Me:
                console.log("服务器收到消息");
                break;
            case AG_MSG.Ce:
                console.log("收到消息");
                parseInt("0x" + M(E.slice(10, 14)));
                var O = 15;
                switch (E[14]) {
                    case MSG_TYPE.L:
                        console.log("单聊消息");
                        var t = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        var _ = V(E.slice(O, O + t)), a = E[O += t];
                        switch (O += 1, a) {
                            case ENCRYPT_TYPE.g:
                                var r = parseInt("0x" + M(E.slice(O, O + 4)));
                                O += 4;
                                var n = o(E.slice(O, O + r));
                                console.log(_, n.digest, n.content), StarRtc.StarManager.getSingleMessage(_, n.digest, n.content);
                                break;
                            case ENCRYPT_TYPE.m:
                        }
                        break;
                    case MSG_TYPE.G:
                        console.log("群消息");
                        var s = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        var c = V(E.slice(O, O + s));
                        O += s;
                        t = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        _ = V(E.slice(O, O + t)), a = E[O += t];
                        switch (O += 1, a) {
                            case ENCRYPT_TYPE.g:
                                r = parseInt("0x" + M(E.slice(O, O + 4)));
                                O += 4;
                                n = o(E.slice(O, O + r));
                                console.log(c, _, n.digest, n.content), StarRtc.StarManager.getGroupMessage(c, _, n.digest, n.content);
                                break;
                            case ENCRYPT_TYPE.m:
                        }
                        break;
                    case MSG_TYPE.l:
                        console.log("群私信消息");
                        s = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        c = V(E.slice(O, O + s));
                        O += s;
                        t = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        _ = V(E.slice(O, O + t)), a = E[O += t];
                        switch (O += 1, a) {
                            case ENCRYPT_TYPE.g:
                                r = parseInt("0x" + M(E.slice(O, O + 4)));
                                O += 4;
                                n = o(E.slice(O, O + r));
                                console.log(c, _, n.digest, n.content), StarRtc.StarManager.getGroupPrivateMessage(c, _, n.digest, n.content);
                                break;
                            case ENCRYPT_TYPE.m:
                        }
                        break;
                    case MSG_TYPE.D:
                        console.log("推送群信息");
                        s = parseInt("0x" + M(E.slice(O, O + 2)));
                        O += 2;
                        c = V(E.slice(O, O + s));
                        O += s;
                        r = parseInt("0x" + M(E.slice(O, O + 4)));
                        O += 4;
                        n = o(E.slice(O, O + r));
                        console.log(c, n.digest, n.content), StarRtc.StarManager.getGroupPushMessage(c, n.digest, n.content);
                        break;
                    case MSG_TYPE.p:
                        console.log("推送系统信息");
                        r = parseInt("0x" + M(E.slice(O, O + 4)));
                        O += 4;
                        n = o(E.slice(O, O + r));
                        console.log(n.digest, n.content), StarRtc.StarManager.getSystemPushMessage(n.digest, n.content)
                }
                R = E.slice(2, 10), console.log("发送消息回执"), StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, StarRtc.AUtils.constructReceivedMsg(R)));
                break;
            case AG_MSG.ue:
                var S = parseInt("0x" + M(E.slice(2, 4))), i = V(E.slice(6, E.byteLength));
                console.log("报错:", S, i), StarRtc.StarManager.getErrorMessage(S, i)
        }
    }, I.parseSrcMoonServerMessage = function (e, R) {
        var E = new Uint8Array(e);
        switch (parseInt("0x" + M(E.slice(0, 2)))) {
            case AG_LIVESRCMOONSERVER.yE:
                M(E.slice(18, 20));
                var O = parseInt("0x" + M(E.slice(18, 20)));
                R({type: "srcApplyUpload", status: "success", fingerprint: V(E.slice(20, 20 + O))});
                break;
            case AG_LIVESRCMOONSERVER.wE:
                var t = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "srcApplyUpload", status: "failed", msg: i = V(E.slice(4, 4 + t))});
                break;
            case AG_LIVESRCMOONSERVER.tO:
                console.log("webrtc心跳反馈");
                break;
            case AG_LIVESRCMOONSERVER._O:
                for (var _ = parseInt("0x" + M(E.slice(2, 3))), a = 3, r = E.length, n = {
                    siv: _,
                    uperInfos: {}
                }; a < r;) {
                    var s = parseInt("0x" + M(E.slice(a, a + 1)));
                    a += 1;
                    var c = parseInt("0x" + M(E.slice(a, a + 2)));
                    a += 2;
                    var S = V(E.slice(a, a + c));
                    a += c, n.uperInfos[s] = {upId: s, userId: S}
                }
                R({type: "uperStreamInfoUpdate", status: "success", msg: n});
                break;
            case AG_LIVESRCMOONSERVER.OO:
                R({type: "stopStream", status: "success"});
                break;
            case AG_LIVESRCMOONSERVER.zE:
                R({type: "streamConfig", status: "success", channelId: V(E.slice(2, 18))});
                break;
            case AG_LIVESRCMOONSERVER.ZE:
                R({type: "streamConfig", status: "failed", channelId: V(E.slice(2, 18))});
                break;
            case AG_LIVESRCMOONSERVER.$E:
                R({type: "delChannel", status: "success", channelId: V(E.slice(2, 18))});
                break;
            case AG_LIVESRCMOONSERVER.qE:
                t = parseInt("0x" + M(E.slice(2, 4)));
                var i = V(E.slice(4, 4 + t));
                R({type: "delChannel", status: "failed", channelId: V(E.slice(4 + t, 4 + t + 16)), msg: i});
                break;
            case AG_LIVESRCMOONSERVER.HE:
                R({type: "createChannel", status: "success", channelId: V(E.slice(2, 18))});
                break;
            case AG_LIVESRCMOONSERVER.gE:
                t = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "createChannel", status: "failed", msg: i = V(E.slice(4, 4 + t))});
                break;
            case AG_LIVESRCMOONSERVER.aO:
                s = parseInt("0x" + M(E.slice(2, 3))), _ = parseInt("0x" + M(E.slice(3, 4)));
                var N = V(E.slice(5));
                R({
                    type: "streamData",
                    status: "success",
                    upId: s,
                    siv: _,
                    streamDataType: parseInt("0x" + M(E.slice(4, 5))),
                    streamData: N
                });
                break;
            case AG_LIVESRCMOONSERVER.rO:
                (i = {}).errId = parseInt("0x" + M(E.slice(2, 4))), i.errStrlen = parseInt("0x" + M(E.slice(4, 6))), i.errStr = V(E.slice(6, 6 + i.errStrlen)), R({
                    type: "serverErr",
                    status: "failed",
                    msg: i
                })
        }
    }, I.parseVdnMoonServerMessage = function (e, R) {
        var E = new Uint8Array(e);
        switch (parseInt("0x" + M(E.slice(0, 2)))) {
            case AG_LIVEVDNMOONSERVER.MO:
                var O = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "vdnWebrtcReg", status: "success", fingerprint: V(E.slice(4, 4 + O))});
                break;
            case AG_LIVEVDNMOONSERVER.CO:
                for (var t = V(E.slice(2, 18)), _ = parseInt("0x" + M(E.slice(18, 19))), a = 19, r = E.length, n = {
                    siv: _,
                    uperInfos: {}
                }; a < r;) {
                    var s = parseInt("0x" + M(E.slice(a, a + 1)));
                    a += 1;
                    var c = parseInt("0x" + M(E.slice(a, a + 2)));
                    a += 2;
                    var S = V(E.slice(a, a + c));
                    a += c, n.uperInfos[s] = {upId: s, userId: S}
                }
                R({type: "vdnApplyDownload", status: "success", channelId: t, uperInfos: n});
                break;
            case AG_LIVEVDNMOONSERVER.PO:
                console.log("vdn 心跳反馈");
                break;
            case AG_LIVEVDNMOONSERVER.uO:
                var i = parseInt("0x" + M(E.slice(2, 4))), N = V(E.slice(4, 4 + i));
                R({
                    type: "vdnApplyDownload",
                    status: "failed",
                    channelId: t = V(E.slice(4 + i, 4 + i + 16)),
                    failedStatus: N
                });
                break;
            case AG_LIVEVDNMOONSERVER.TO:
                R({type: "streamConfig", status: "success", channelId: t = V(E.slice(2, 18))});
                break;
            case AG_LIVEVDNMOONSERVER.LO:
                R({type: "streamConfig", status: "failed", channelId: t = V(E.slice(2, 18))});
                break;
            case AG_LIVEVDNMOONSERVER.GO:
                for (t = V(E.slice(2, 18)), _ = parseInt("0x" + M(E.slice(18, 19))), a = 19, r = E.length, n = {
                    channelId: t,
                    siv: _,
                    uperInfos: {}
                }; a < r;) {
                    s = parseInt("0x" + M(E.slice(a, a + 1)));
                    a += 1;
                    c = parseInt("0x" + M(E.slice(a, a + 2)));
                    a += 2;
                    S = V(E.slice(a, a + c));
                    a += c, n.uperInfos[s] = {upId: s, userId: S}
                }
                R({type: "uperStreamInfoUpdate", status: "success", channelId: t, msg: n});
                break;
            case AG_LIVEVDNMOONSERVER.lO:
                R({
                    type: "streamData",
                    status: "success",
                    upId: s = parseInt("0x" + M(E.slice(2, 3))),
                    siv: _ = parseInt("0x" + M(E.slice(3, 4))),
                    streamDataType: parseInt("0x" + M(E.slice(4, 5))),
                    streamData: V(E.slice(5))
                });
                break;
            case AG_LIVEVDNMOONSERVER.fO:
            case AG_LIVEVDNMOONSERVER.DO:
            case AG_LIVEVDNMOONSERVER.pO:
                break;
            case AG_LIVEVDNMOONSERVER.vO:
                var I = {};
                I.errId = parseInt("0x" + M(E.slice(2, 4))), I.errStrlen = parseInt("0x" + M(E.slice(4, 6))), I.errStr = V(E.slice(6, 6 + I.errStrlen)), R({
                    type: "serverErr",
                    status: "failed",
                    msg: I
                })
        }
    }, I.parseChatMoonServerMessage = function (e, R) {
        var E = new Uint8Array(e), O = parseInt("0x" + M(E.slice(0, 2)));
        switch (O) {
            case AG_CHATROOMMOONSERVER.We:
                R({
                    type: "createChatRoom",
                    status: "success",
                    chatroomId: _ = V(E.slice(2, 18)),
                    maxContentLen: parseInt("0x" + M(E.slice(18, 20)))
                });
                break;
            case AG_CHATROOMMOONSERVER.Ke:
                var t = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "createChatRoom", status: "failed", status: V(E.slice(4, 4 + t))});
                break;
            case AG_CHATROOMMOONSERVER.Be:
                R({type: "deleteChatRoom", status: "success", roomId: _ = V(E.slice(2, 18))});
                break;
            case AG_CHATROOMMOONSERVER.Je:
                var _ = V(E.slice(2, 18));
                t = parseInt("0x" + M(E.slice(18, 20)));
                R({type: "deleteChatRoom", status: "failed", msg: V(E.slice(20, 20 + t)), roomId: _});
                break;
            case AG_CHATROOMMOONSERVER.Qe:
                var a = parseInt("0x" + M(E.slice(2, 4)));
                R({
                    type: "banaedToSendMsg",
                    status: "success",
                    banUserId: r = V(E.slice(4, 4 + a)),
                    banTime: n = parseInt("0x" + M(E.slice(4 + a, 4 + a + 2)))
                });
                break;
            case AG_CHATROOMMOONSERVER.je:
                a = parseInt("0x" + M(E.slice(2, 4)));
                var r = V(E.slice(4, 4 + a)), n = parseInt("0x" + M(E.slice(4 + a, 4 + a + 2)));
                t = parseInt("0x" + M(E.slice(4 + a + 2, 4 + a + 2 + 2)));
                R({
                    type: "banaedToSendMsg",
                    status: "failed",
                    banUserId: r,
                    banTime: n,
                    msg: V(E.slice(4 + a + 2 + 2, 4 + a + 2 + 2 + t))
                });
                break;
            case AG_CHATROOMMOONSERVER.Xe:
                var s = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "kickOutUser", status: "success", kickOutUserId: c = V(E.slice(4, 4 + s))});
                break;
            case AG_CHATROOMMOONSERVER.$e:
                s = parseInt("0x" + M(E.slice(2, 4)));
                var c = V(E.slice(4, 4 + s));
                t = parseInt("0x" + M(E.slice(4 + s, 4 + a + 2)));
                R({type: "kickOutUser", status: "failed", kickOutUserId: c, msg: V(E.slice(4 + s + 2, 4 + s + 2 + t))});
                break;
            case AG_CHATROOMMOONSERVER.qe:
            case AG_CHATROOMMOONSERVER.ze:
                R({
                    type: "joinChatRoom",
                    status: "success",
                    roomId: _ = V(E.slice(2, 18)),
                    maxContentLen: parseInt("0x" + M(E.slice(18, 20)))
                });
                break;
            case AG_CHATROOMMOONSERVER.Ze:
                _ = V(E.slice(2, 18)), t = parseInt("0x" + M(E.slice(18, 20)));
                R({type: "joinChatRoom", status: "failed", failedStatus: V(E.slice(20, 20 + t)), roomId: _});
                break;
            case AG_CHATROOMMOONSERVER.eR:
                console.log("chatRoom心跳反馈");
                break;
            case AG_CHATROOMMOONSERVER.RR:
            case AG_CHATROOMMOONSERVER.ER:
                var S = parseInt("0x" + M(E.slice(2, 4))), i = V(E.slice(4, 4 + S)),
                    N = parseInt("0x" + M(E.slice(4 + S, 4 + S + 4))), I = V(E.slice(4 + S + 4, 4 + S + 4 + N));
                R({
                    type: O == AG_CHATROOMMOONSERVER.RR ? "recvChatPrivateMsg" : "recvChatMsg",
                    status: "success",
                    fromUserId: i,
                    msg: I
                });
                break;
            case AG_CHATROOMMOONSERVER.OR:
                R({type: "chatroomUserBannedMsg", status: "success", banTime: n = parseInt("0x" + M(E.slice(2, 4)))});
                break;
            case AG_CHATROOMMOONSERVER.tR:
                R({type: "chatroomUserKicked", status: "success"});
                break;
            case AG_CHATROOMMOONSERVER._R:
                R({type: "sendMsgNoFree"});
                break;
            case AG_CHATROOMMOONSERVER.aR:
                (I = {}).errId = parseInt("0x" + M(E.slice(2, 4))), I.errStrlen = parseInt("0x" + M(E.slice(4, 6))), I.errStr = V(E.slice(6, 6 + I.errStrlen)), R({
                    type: "serverErr",
                    status: "failed",
                    msg: I
                });
                break;
            case AG_CHATROOMMOONSERVER.rR:
                R({
                    type: "getRoomOnlineNum",
                    status: "success",
                    roomId: _ = V(E.slice(2, 18)),
                    onlineNum: parseInt("0x" + M(E.slice(18, 22)))
                })
        }
    }, I.parseVoipMoonServerMessage = function (e, R) {
        var E = new Uint8Array(e);
        switch (parseInt("0x" + M(E.slice(0, 2)))) {
            case AG_VOIPMOONSERVER.GR:
                R({type: "voipCallingAck", status: "success"});
                break;
            case AG_VOIPMOONSERVER.fR:
                var O = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "voipCalling", status: "success", fingerprint: V(E.slice(4, 4 + O))});
                break;
            case AG_VOIPMOONSERVER.DR:
                (t = {}).errId = parseInt("0x" + M(E.slice(2, 4))), t.errStrlen = parseInt("0x" + M(E.slice(4, 6))), t.errStr = V(E.slice(6, 6 + t.errStrlen)), R({
                    type: "voipCalling",
                    status: "failed",
                    msg: t
                });
                break;
            case AG_VOIPMOONSERVER.UR:
                O = parseInt("0x" + M(E.slice(2, 4)));
                R({type: "voipResponseing", status: "success", fingerprint: V(E.slice(4, 4 + O))});
                break;
            case AG_VOIPMOONSERVER.vR:
                (t = {}).errId = parseInt("0x" + M(E.slice(2, 4))), t.errStrlen = parseInt("0x" + M(E.slice(4, 6))), t.errStr = V(E.slice(6, 6 + t.errStrlen)), R({
                    type: "voipResponseing",
                    status: "failed",
                    msg: t
                });
                break;
            case AG_VOIPMOONSERVER.dR:
            case AG_VOIPMOONSERVER.bR:
                break;
            case AG_VOIPMOONSERVER.kR:
                var t;
                (t = {}).errId = parseInt("0x" + M(E.slice(2, 4))), t.errStrlen = parseInt("0x" + M(E.slice(4, 6))), t.errStr = V(E.slice(6, 6 + t.errStrlen)), R({
                    type: "serverErr",
                    status: "failed",
                    msg: t
                })
        }
    }, I.constructHeartBeatMsg = function (e) {
        return new Uint8Array(H(b(e.toString(16))))
    }
}, StarRtc.StarManager = new function () {
    var t = this, e = "starRTC v1.0.0", _ = "", a = "", r = "", n = "", s = "", R = null, c = null, S = "";
    t.version = function () {
        return console.log(e), e
    }, t.login = function (e, R, E, O) {
        "WebSocket" in window ? (r = (_ = e) + "_" + (a = R), n = E, c = O, StarRtc.Instance.configModePulic ? $.get("https://" + StarRtc.Instance.loginServerUrl + ":" + StarRtc.Instance.loginServerPort + "/?userId=" + r + "&authKey=" + n, function (e, R) {
            if (console.log("authKey 验证：", R, e), "success" === R) {
                var E = JSON.parse(e);
                1 == E.status ? (s = E.data, $.get("https://" + StarRtc.Instance.msgScheduleUrl + ":" + StarRtc.Instance.msgSchedulePort + "/?userId=" + r, function (e, R) {
                    R = "success";
                    console.log("消息调度：", R, e);
                    var E = JSON.parse(e);
                    1 == E.status ? (S = "wss://" + E.data, t.connect()) : O({msg: "请求msg调度数据异常"}, "connect failed")
                })) : O({msg: "登录验证失败"}, "connect failed")
            } else O({msg: "请求验证地址失败"}, "connect failed")
        }) : (s = "free", S = "wss://" + StarRtc.Instance.msgServerUrl + ":" + StarRtc.Instance.msgServerWebsocketPort, t.connect())) : (console.log("当前浏览器 Not support websocket"), O({msg: "当前浏览器 Not support websocket"}, "connect failed"))
    }, t.connect = function () {
        console.log("WebSocket：" + S), (R = new WebSocket(S)).onerror = function () {
            console.log("WebSocket连接发生错误"), c({msg: "WebSocket连接发生错误"}, "connect failed")
        }, R.onopen = function () {
            console.log("WebSocket连接成功"), c({msg: "WebSocket连接成功"}, "connect success"), t.startAuth()
        }, R.onmessage = function (e) {
            console.log("onmessage", e.data), c(e.data, "onmessage")
        }, R.onclose = function () {
            console.log("WebSocket连接关闭"), c({msg: "WebSocket连接关闭"}, "connect closed"), R = null
        }
    }, t.close = function () {
        console.log("关闭WebSocket连接"), StarRtc.AUtils.clear(), null != R && R.close()
    }, t.send = function (e) {
        null != R && R.send(e)
    }, t.getSingleMessage = function (e, R, E) {
        var O = e.split("_");
        2 == O.length && (e = O[1]), c({fromId: e, digest: R, msg: E}, "onSingleMessage")
    }, t.getErrorMessage = function (e, R) {
        c({errId: e, errStr: R}, "onErrorMessage")
    }, t.getGroupMessage = function (e, R, E, O) {
        var t = R.split("_");
        2 == t.length && (R = t[1]);
        var _ = e.split("_");
        2 == _.length && (e = _[1]), c({groupId: e, fromId: R, digest: E, msg: O}, "onGroupMessage")
    }, t.getGroupPrivateMessage = function (e, R, E, O) {
        var t = R.split("_");
        2 == t.length && (R = t[1]);
        var _ = e.split("_");
        2 == _.length && (e = _[1]), c({groupId: e, fromId: R, digest: E, msg: O}, "onGroupPrivateMessage")
    }, t.getGroupPushMessage = function (e, R, E) {
        var O = e.split("_");
        2 == O.length && (e = O[1]), c({groupId: e, digest: R, msg: E}, "onGroupPushMessage")
    }, t.getSystemPushMessage = function (e, R) {
        c({digest: e, msg: R}, "onSystemPushMessage")
    }, t.startAuth = function () {
        StarRtc.AUtils.setUserInfo(_, a, s), t.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, StarRtc.AUtils.constructAuthMsg()))
    }, t.getLoginMessage = function (e) {
        c(e, "onLoginMessage")
    }, window.onbeforeunload = function () {
        t.close()
    }
}, StarRtc.Instance = new function () {
    var t = this, n = "", s = "", c = "", _ = null, O = null, a = 0;
    t.configModePulic = !0, t.loginServerUrl = "ips2.starrtc.com", t.loginServerPort = "9920", t.msgScheduleUrl = "ips2.starrtc.com", t.msgSchedulePort = "9904", t.chatRoomScheduleUrl = "ips2.starrtc.com", t.chatRoomSchedulePort = "9907", t.srcScheduleUrl = "ips2.starrtc.com", t.srcSchedulePort = "9929", t.vdnScheduleUrl = "ips2.starrtc.com", t.vdnSchedulePort = "9926", t.voipServerUrl = "voip2.starrtc.com", t.voipServerPort = "10086", t.voipServerWebsocketPort = "10087", t.voipServerWebrtcPort = "10088", t.workServerUrl = "https://api.starrtc.com/public", t.webrtcServerIP = "123.103.93.74", t.msgServerUrl = "ips2.starrtc.com", t.msgServerWebsocketPort = "9904", t.chatRoomServerUrl = "ips2.starrtc.com", t.chatRoomServerWebsocketPort = "9907", t.srcServerUrl = "ips2.starrtc.com", t.srcServerWebsocketPort = "9929", t.srcServerWebrtcPort = "10088", t.vdnServerUrl = "ips2.starrtc.com", t.vdnServerWebsocketPort = "9929", t.vdnServerWebrtcPort = "10088", t.version = function () {
        return StarRtc.StarManager.version()
    };
    var r = function (e, R) {
        switch (R) {
            case"connect failed":
            case"connect success":
            case"connect closed":
                _(e, R);
                break;
            case"onmessage":
                StarRtc.AUtils.parseProtocol(e, function (e) {
                    switch (e.appid) {
                        case APP_PRODUCT_ID.R:
                            StarRtc.AUtils.parseMessage(e.msgArr)
                    }
                });
                break;
            case"onSingleMessage":
                e.msg = JSON.parse(e.msg);
                var E = R;
                if (0 == e.msg.type) switch (e.msg.code) {
                    case AG_MSG_VOIP_CTRL.h:
                        e.type = "voipCall", E = "onVoipMessage";
                        break;
                    case AG_MSG_VOIP_CTRL.F:
                        e.type = "voipRefuse", E = "onVoipMessage";
                        break;
                    case AG_MSG_VOIP_CTRL.W:
                        e.type = "voipHangup", E = "onVoipMessage";
                        break;
                    case AG_MSG_VOIP_CTRL.K:
                        e.type = "voipBusy", E = "onVoipMessage";
                        break;
                    case AG_MSG_VOIP_CTRL.B:
                        e.type = "voipConnect", E = "onVoipMessage";
                        break;
                    default:
                        e.type = "voipSingleMsg"
                } else e.type = "voipSingleMsg";
                (null != O ? O : _)(e, E);
                break;
            case"onLoginMessage":
            case"onGroupMessage":
            case"onGroupPrivateMessage":
            case"onGroupPushMessage":
            case"onSystemPushMessage":
            case"onErrorMessage":
                null != O && O(e, R), _(e, R)
        }
    };
    t.setLoginServerUrl = function (e) {
        t.loginServerUrl = e
    }, t.setMsgScheduleUrl = function (e) {
        t.msgScheduleUrl = e
    }, t.setChatRoomScheduleUrl = function (e) {
        t.chatRoomScheduleUrl = e
    }, t.setSrcScheduleUrl = function (e) {
        t.srcScheduleUrl = e
    }, t.setVdnScheduleUrl = function (e) {
        t.vdnScheduleUrl = e
    }, t.setVoipServerUrl = function (e) {
        t.voipServerUrl = e
    }, t.setWorkServerUrl = function (e) {
        t.workServerUrl = e
    }, t.setWebrtcServerIP = function (e) {
        t.webrtcServerIP = e
    }, t.setMsgServerInfo = function (e, R) {
        t.msgServerUrl = e, t.msgServerWebsocketPort = R
    }, t.setchatRoomServerInfo = function (e, R) {
        t.chatRoomServerUrl = e, t.chatRoomServerWebsocketPort = R
    }, t.setSrcServerInfo = function (e, R, E) {
        t.srcServerUrl = e, t.srcServerWebsocketPort = R, t.srcServerWebrtcPort = E
    }, t.setVdnServerInfo = function (e, R, E) {
        t.vdnServerUrl = e, t.vdnServerWebsocketPort = R, t.vdnServerWebrtcPort = E
    }, t.setVoipServerInfo = function (e, R, E, O) {
        t.voipServerUrl = e, t.voipServerPort = R, t.voipServerWebsocketPort = E, t.voipServerWebrtcPort = O
    }, t.setConfigModePulic = function (e) {
        t.configModePulic = e
    }, t.login = function (e, R, E, O) {
        (n = e) + "_" + (s = R), c = E, _ = O, StarRtc.StarManager.login(e, R, E, r)
    }, t.logout = function () {
        StarRtc.StarManager.close()
    }, t.sendSingleMsg = function (e, R, E, O) {
        StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, StarRtc.AUtils.constructSingleMsg(e, ++a, R, E, O)))
    }, t.sendGroupMsg = function (e, R, E) {
        StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, StarRtc.AUtils.constructGroupMsg(e, ++a, R, E)))
    }, t.sendSingleCtrlMsg = function (e, R, E, O) {
        StarRtc.StarManager.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.R, ACTION_GROUP_ID.V, StarRtc.AUtils.constructSingleCtrlMsg(e, ++a, R, E, O)))
    }, t.sendVoipCtrlMsg = function (e, R) {
        var E = "";
        R == AG_MSG_VOIP_CTRL.h && (E = JSON.stringify({
            VoIP_protocal_type: "TCP",
            VoIP_server_IP: StarRtc.Instance.voipServerUrl,
            VoIP_server_Port: StarRtc.Instance.voipServerPort
        })), t.sendSingleCtrlMsg(e, "新消息", E, R)
    }, t.sendVoipCallMsg = function (e, R) {
        var E, O = R || (new Date).getTime();
        E = JSON.stringify({
            VoIP_protocal_type: "TCP",
            VoIP_server_IP: StarRtc.Instance.voipServerUrl,
            VoIP_server_Port: StarRtc.Instance.voipServerPort,
            ts: O
        }), t.sendSingleCtrlMsg(e, "新消息", E, AG_MSG_VOIP_CTRL.h)
    }, t.sendVoipRefuseMsg = function (e) {
        t.sendVoipCtrlMsg(e, AG_MSG_VOIP_CTRL.F)
    }, t.sendVoipHungupMsg = function (e) {
        t.sendVoipCtrlMsg(e, AG_MSG_VOIP_CTRL.W), null != O && O({type: "voipCancle"}, "onVoipMessage")
    }, t.sendVoipBusyMsg = function (e) {
        t.sendVoipCtrlMsg(e, AG_MSG_VOIP_CTRL.K)
    }, t.sendVoipConnectMsg = function (e) {
        t.sendVoipCtrlMsg(e, AG_MSG_VOIP_CTRL.B)
    }, t.setIMExtraback = function (e) {
        O = e
    }, t.getStarRoomSDK = function (e, R, E, O, t, _, a) {
        var r = new StarRtc.StarRoomSDK(e, R, E, O, t, _, a);
        return r.login(n, s, c), r
    }, t.getVideoMeetingRoomSDK = function (e, R, E) {
        return t.getStarRoomSDK("src", e, R, E, 3, 1)
    }, t.getVideoLiveRoomSDK = function (e, R, E, O) {
        return t.getStarRoomSDK(e, R, E, O, 3, 2)
    }, t.getVoipRoomSDK = function (e, R, E) {
        return t.getStarRoomSDK("voip", e, R, E, 2, 0, t)
    }
}, StarRtc.WebrtcWebsocket = function (e, R) {
    var E, O = this, t = R, _ = e, a = null;
    return O.startHeartBeat = function (e) {
        a.send(e), E = setInterval(function () {
            a.send(e)
        }, 5e3)
    }, O.stopHeartBeat = function () {
        clearInterval(E)
    }, O.connect = function (e) {
        console.log("webrtcConnect" + e), (a = new WebSocket(e)).onerror = function (e) {
            console.log("WebSocket连接发生错误"), _({msg: "WebSocket连接发生错误", data: e.data}, "connect failed")
        }, a.onopen = function () {
            console.log("WebSocket连接成功"), _({msg: "WebSocket连接成功"}, "connect success")
        }, a.onmessage = function (e) {
            console.log("onmessage", e.data), _(e.data, "onmessage")
        }, a.onclose = function (e) {
            console.log("WebSocket连接关闭"), O.stopHeartBeat(), _({
                msg: "WebSocket连接关闭",
                data: e.code
            }, "connect closed"), a = null
        }
    }, O.starConnect = function (O) {
        $.get(t, function (e, R) {
            if (console.log("消息调度：", R, e), "success" === R) {
                var E = JSON.parse(e);
                1 == E.status ? O("success", E.data) : O("failed")
            } else O("failed")
        })
    }, O.send = function (e) {
        a.send(e)
    }, O.close = function () {
        null != a && a.close()
    }, O.readyState = function () {
        return null != a ? a.readyState : -1
    }, O
}, StarRtc.StarRoomSDK = function (e, R, E, O, t, _, a) {
    var r = "我要上麦！", n = this, s = "", c = R, S = e, i = O, N = E, I = t || 3, o = 0 != (1 & I), A = 0 != (2 & I),
        V = null, M = null, C = null, P = null, u = !1, T = null, L = a;

    function G() {
        null != T && (clearInterval(T), T = null)
    }

    function l(e) {
        if (null != e) {
            var R = e.getState();
            0 <= R && R < 2 && e.sigDisconnect()
        }
    }

    function f() {
        var e = !0;
        return o && (e = e && (3 == C.getState() || -1 == C.getState())), A && (e = e && (3 == V.getState() || -1 == V.getState())), e
    }

    null != L && "voip" == e && L.setIMExtraback(function (e, R) {
        D(e, "onVoipMessage")
    });
    var D = function (e, R) {
        switch (e.userData = i, e.obj = n, R) {
            case"connect success":
                A ? V.sigConnect() : N(e, R, c);
                break;
            case"connect failed":
            case"connect closed":
                A && l(V), f() && N(e, R, c);
                break;
            case"onmessage":
                break;
            case"onChatRoomMessage":
                switch (e.type) {
                    case"createChatRoom":
                        "success" == e.status && (i.roomInfo.ID = e.chatroomId, i.roomInfo.Creator = s, A && (M.roomInfo.Name = e.chatroomId, V.createNew()));
                        break;
                    case"deleteChatRoom":
                        "success" == e.status && (A ? V.deleteCurrRoom() : N(e, R, c));
                        break;
                    case"joinChatRoom":
                        "success" == e.status && A && V.joinRoom();
                        break;
                    case"recvChatPrivateMsg":
                        if (0 == e.msg.type) switch (e.msg.code) {
                            case 2e3:
                                e.msg.msgType = "apply";
                                break;
                            case 2002:
                                e.msg.msgType = "applyAgree";
                                break;
                            case 2004:
                                e.msg.msgType = "applyDisagree";
                                break;
                            case 2200:
                                e.msg.msgType = "linkStop";
                                break;
                            case 2100:
                                e.msg.msgType = "invite";
                                break;
                            case 2102:
                                e.msg.msgType = "inviteAgree";
                                break;
                            case 2106:
                                e.msg.msgType = "inviteDisagree";
                                break;
                            case 2104:
                                e.msg.msgType = "inviteLinkStart";
                                break;
                            default:
                                e.msg.msgType = "common"
                        }
                }
                N(e, R, c);
                break;
            case"onVoipMessage":
                switch (e.type) {
                    case"voipCall":
                        e.fromId != i.roomInfo.targetId && L.sendVoipBusyMsg(e.fromId);
                        break;
                    case"voipHangup":
                        e.fromId == i.roomInfo.targetId && (n.leaveRoom(!0), N(e, R, c));
                        break;
                    case"voipBusy":
                        G(), n.leaveRoom(!0), N(e, R, c);
                        break;
                    case"voipConnect":
                    case"voipRefuse":
                        G(), N(e, R, c);
                        break;
                    case"voipCancle":
                        G();
                        break;
                    default:
                        N(e, R, c)
                }
        }
    };
    return M = clone(i), P = clone(i), A && o && i.roomInfo.ID && (M.roomInfo.ID = i.roomInfo.ID.substring(0, 16), P.roomInfo.ID = i.roomInfo.ID.substring(16, 33)), A && (V = new StarRtc.StarVideoSDK(e, R, function (e, R) {
        switch (e.userData = i, e.obj = n, R) {
            case"connect success":
                N(e, R, c);
                break;
            case"connect closed":
            case"connect failed":
                G(), o && l(C), f() && N(e, R, c);
                break;
            case"onmessage":
                break;
            case"onWebrtcMessage":
                switch (e.type) {
                    case"delChannel":
                        "success" == e.status ? N(e, R, c) : alert("删除视频会议失败");
                        break;
                    case"createChannel":
                        "success" == e.status && (i.roomInfo.Creator = s, i.roomInfo.ID = o ? e.channelId + i.roomInfo.ID : e.channelId), N(e, R, c);
                        break;
                    case"voipCallingAck":
                        if (null != L) {
                            G();
                            var E = (new Date).getTime();
                            L.sendVoipCallMsg(i.roomInfo.targetId, E), _ = i.roomInfo.targetId, O = function () {
                                L.sendVoipCallMsg(_, E)
                            }, t = 3e3, null != T && G(), T = setInterval(O, t)
                        }
                        break;
                    case"voipResponseing":
                        "success" == e.status && null != L && L.sendVoipConnectMsg(i.roomInfo.targetId), N(e, R, c);
                        break;
                    default:
                        N(e, R, c)
                }
        }
        var O, t, _
    }, M, _)), o && (C = new StarRtc.StarChatSDK(R, D, P)), n.login = function (e, R, E) {
        e + "_" + (s = R), E, o && C.login(e, R, E), A && V.login(e, R, E)
    }, n.sigConnect = function () {
        u = !1, o ? C.sigConnect() : A && V.sigConnect()
    }, n.sigDisconnect = function (e) {
        null == e && (e = !0), u = e, A ? V.sigDisconnect() : o && C.sigDisconnect()
    }, n.createNew = function () {
        "voip" != S && (o ? C.createNew() : A && V.createNew())
    }, n.deleteCurrRoom = function () {
        "voip" != S && (o ? C.deleteCurrRoom() : A && V.deleteCurrRoom())
    }, n.createStream = function (e) {
        A && V.createStream(e)
    }, n.joinRoom = function () {
        o && "new" != c ? C.joinRoom() : A && V.joinRoom()
    }, n.leaveRoom = function (e) {
        if (A) {
            switch (S) {
                case"voip":
                    var R = e || !1;
                    null == L || R || L.sendVoipHungupMsg(i.roomInfo.targetId), L.setIMExtraback(null)
            }
            V.leaveRoom(R)
        } else o && C.leaveRoom()
    }, n.streamConfigChange = function (e) {
        A && V.streamConfigChange(e)
    }, n.sendChatMsg = function (e) {
        o && C.sendChatMsg(e)
    }, n.sendVoipMsg = function (e) {
        "voip" == S && null != L && L.sendSingleMsg(i.roomInfo.targetId, "新媒体", e)
    }, n.sendChatPrivateMsg = function (e, R) {
        o && C.sendChatPrivateMsg(e, R)
    }, n.sendApplyMsg = function () {
        o && A && "vdn" == S && C.sendChatCtrlPrivateMsg(i.roomInfo.Creator, r, 2e3)
    }, n.sendApplyAgreeMsg = function (e) {
        o && A && "src" == S && C.sendChatCtrlPrivateMsg(e, r, 2002)
    }, n.sendApplyDisagreeMsg = function (e) {
        o && A && "src" == S && C.sendChatCtrlPrivateMsg(e, r, 2004)
    }, n.sendInviteLinkMsg = function (e) {
        o && A && "src" == S && C.sendChatCtrlPrivateMsg(e, r, 2100)
    }, n.sendInviteLinkAgreeMsg = function () {
        o && A && "vdn" == S && C.sendChatCtrlPrivateMsg(i.roomInfo.Creator, r, 2102)
    }, n.sendInviteLinkDisagreeMsg = function () {
        o && A && "vdn" == S && C.sendChatCtrlPrivateMsg(i.roomInfo.Creator, r, 2106)
    }, n.sendInviteLinkStartMsg = function () {
        o && A && "vdn" == S && C.sendChatCtrlPrivateMsg(i.roomInfo.Creator, r, 2104)
    }, n.sendLinkStopMsg = function (e) {
        o && A && "src" == S && C.sendChatCtrlPrivateMsg(e, r, 2200)
    }, n.kickOutUser = function (e) {
        o && C.kickOutUser(e)
    }, n.banToSendMsg = function (e, R) {
        o && C.banToSendMsg(e, R)
    }, n.getRoomOnlineNum = function () {
        o && C.getRoomOnlineNum()
    }, n.sendStreamData = function (e) {
        A && "src" == S && V.sendStreamData(e)
    }, n.activeDisconnect = function () {
        return u
    }, n
}, StarRtc.StarVideoSDK = function (e, R, E, O, t) {
    var n, s, c = this, S = "", i = "", N = O, I = e, o = E, A = R, V = null, M = "", C = {}, P = {}, _ = t || 1,
        u = {siv: 0, uperInfos: {}}, T = StarWebRTC();
    T.init();
    var L = !1, a = !1, r = function (e) {
        switch (e.type) {
            case"createOffer":
                if ("success" == e.status) {
                    switch (I) {
                        case"src":
                            e.channelId = N.roomInfo.ID;
                            break;
                        case"vdn":
                            e.ssrc = e.bigVideoSSRC;
                            break;
                        case"voip":
                            e.targetId = N.roomInfo.targetId, e.videoSSRC = e.bigVideoSSRC
                    }
                    c.joinRoomInternal(e)
                }
                break;
            case"applyAnswer":
                e.status
        }
    }, G = function (e, R) {
        var E = {type: "streamCreated", streamObj: R};
        E.userData = N, E.obj = c, E.status = "success" == e ? "success" : "failed", o(E, "onWebrtcMessage", A)
    }, l = function (e, R) {
        switch (e.userData = N, e.obj = c, R) {
            case"connect success":
                var E = null;
                switch (I) {
                    case"src":
                        E = StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructHeartBeatMsg(AG_LIVESRCMOONSERVER.kE));
                        break;
                    case"vdn":
                        E = StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.N, ACTION_GROUP_ID.P, StarRtc.AUtils.constructHeartBeatMsg(AG_LIVEVDNMOONSERVER.IO))
                }
                V.startHeartBeat(E), T.setServerInfo({serverIp: C.ip, serverPort: C.webrtcPort}), o(e, R, A);
                break;
            case"connect failed":
            case"connect closed":
                T.destroy(), V = null, o(e, R, A);
                break;
            case"onmessage":
                StarRtc.AUtils.parseProtocol(e, function (e) {
                    e.appid == APP_PRODUCT_ID.i ? StarRtc.AUtils.parseSrcMoonServerMessage(e.msgArr, function (e) {
                        l(e, "onWebrtcMessage")
                    }) : e.appid == APP_PRODUCT_ID.N ? StarRtc.AUtils.parseVdnMoonServerMessage(e.msgArr, function (e) {
                        l(e, "onWebrtcMessage")
                    }) : e.appid == APP_PRODUCT_ID.I && StarRtc.AUtils.parseVoipMoonServerMessage(e.msgArr, function (e) {
                        l(e, "onWebrtcMessage")
                    })
                });
                break;
            case"onWebrtcMessage":
                switch (e.type) {
                    case"uperStreamInfoUpdate":
                        if ("success" == e.status) {
                            if (L) for (var O = 0; O < 7; ++O) {
                                var t = T.getStreamByIndex(O), _ = void 0;
                                0 != Object.keys(u.uperInfos).length && (_ = u.uperInfos[O]);
                                var a = e.msg.uperInfos[O];
                                if (null == _ && null != a) a.userId != i && o({
                                    type: "addUploader",
                                    upId: a.upId,
                                    upUserId: a.userId,
                                    streamInfo: t,
                                    room: c
                                }, R, A); else if (null != _ && null == a) {
                                    var r = s == _.upId;
                                    r && (s = n = void 0), T.resetStreamInfo(t), o({
                                        type: "removeUploader",
                                        upId: _.upId,
                                        upUserId: _.userId,
                                        streamInfo: t,
                                        bigFlag: r,
                                        room: c
                                    }, R, A)
                                } else null != _ && null != a && _.userId != a.userId && o({
                                    type: "changeUploader",
                                    upId: a.upId,
                                    oldUpUserId: _.userId,
                                    newUpUserId: a.userId,
                                    streamInfo: t,
                                    room: c
                                }, R, A)
                            }
                            u = e.msg
                        }
                        break;
                    case"vdnWebrtcReg":
                        if ("success" == e.status) switch (I) {
                            case"vdn":
                                M = e.fingerprint, V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.N, ACTION_GROUP_ID.P, StarRtc.AUtils.constructVdnProtocol(AG_LIVEVDNMOONSERVER.iO, {channelId: N.roomInfo.ID})))
                        } else console.log("vdnWebrtcReg failed");
                        break;
                    case"vdnApplyDownload":
                        "success" == e.status ? T.emit("_webrtc_apply_ok", M, function () {
                            L = !0, l({
                                type: "uperStreamInfoUpdate",
                                status: "success",
                                msg: e.uperInfos
                            }, "onWebrtcMessage")
                        }) : console.log("收到vdnApplyDownload failed"), o(e, R, A);
                        break;
                    case"srcApplyUpload":
                        "success" == e.status ? (e.tmpData = P, console.log("收到_webrtc_apply_ok"), T.emit("_webrtc_apply_ok", e.fingerprint, function () {
                            L = !0;
                            var e = clone(u);
                            u.uperInfos = {}, l({
                                type: "uperStreamInfoUpdate",
                                status: "success",
                                msg: e
                            }, "onWebrtcMessage")
                        })) : console.log("收到srcApplyUpload failed"), o(e, R, A);
                        break;
                    case"streamConfig":
                        if ("success" == e.status) {
                            if (n == s) {
                                t = T.getStreamByIndex(n);
                                T.switchStreamInfo(t);
                                break
                            }
                            if (null != n) {
                                t = T.getStreamByIndex(n);
                                T.switchStreamInfo(t)
                            }
                            if (null != s) {
                                t = T.getStreamByIndex(s);
                                T.switchStreamInfo(t)
                            }
                        }
                        break;
                    case"createChannel":
                        "success" == e.status && (N.roomInfo.ID = e.channelId, N.roomInfo.Creator = S), o(e, R, A);
                        break;
                    case"delChannel":
                        "success" == e.status && (N.roomInfo.ID = ""), o(e, R, A);
                        break;
                    case"serverErr":
                        break;
                    case"voipResponseing":
                    case"voipCalling":
                        "success" == e.status && (console.log("收到_webrtc_apply_ok"), T.emit("_webrtc_apply_ok", e.fingerprint, function () {
                            l({type: "voipStreamReady", status: "success"}, "onWebrtcMessage")
                        })), o(e, R, A);
                        break;
                    case"voipStreamReady":
                        t = T.getStreamByIndex(0);
                        T.switchStreamInfo(t), o({type: "voipStreamReady", streamObj: t.streamObj, room: c}, R, A);
                        break;
                    default:
                        o(e, R, A)
                }
        }
    };
    return c.login = function (e, R, E) {
        i = e + "_" + (S = R), E
    }, c.sigConnect = function () {
        switch (a = !1, C.ip = StarRtc.Instance.webrtcServerIP, V = null, I) {
            case"src":
                if (!StarRtc.Instance.configModePulic) {
                    V = new StarRtc.WebrtcWebsocket(l, null), (E = {}).ip = StarRtc.Instance.srcServerUrl, C.websocketPort = StarRtc.Instance.srcServerWebsocketPort, C.webrtcPort = StarRtc.Instance.srcServerWebrtcPort, E.websocketPort = C.websocketPort;
                    var e = "wss://" + E.ip + ":" + E.websocketPort;
                    return void V.connect(e)
                }
                var R = "https://" + StarRtc.Instance.srcScheduleUrl + ":" + StarRtc.Instance.srcSchedulePort + "?userId=" + i;
                V = new StarRtc.WebrtcWebsocket(l, R);
                break;
            case"vdn":
                if (!StarRtc.Instance.configModePulic) {
                    V = new StarRtc.WebrtcWebsocket(l, null), (E = {}).ip = StarRtc.Instance.vdnServerUrl, C.websocketPort = StarRtc.Instance.vdnServerWebsocketPort, C.webrtcPort = StarRtc.Instance.vdnServerWebrtcPort, E.websocketPort = C.websocketPort;
                    e = "wss://" + E.ip + ":" + E.websocketPort;
                    return void V.connect(e)
                }
                R = "https://" + StarRtc.Instance.vdnScheduleUrl + ":" + StarRtc.Instance.vdnSchedulePort + "?userId=" + i + "&channelId=" + N.channelId;
                V = new StarRtc.WebrtcWebsocket(l, R);
                break;
            case"voip":
                var E;
                V = new StarRtc.WebrtcWebsocket(l, null), (E = {}).ip = StarRtc.Instance.voipServerUrl, C.websocketPort = StarRtc.Instance.voipServerWebsocketPort, C.webrtcPort = StarRtc.Instance.voipServerWebrtcPort, E.websocketPort = C.websocketPort;
                e = "wss://" + E.ip + ":" + E.websocketPort;
                return void V.connect(e);
            default:
                return
        }
        V.starConnect(function (e, R) {
            if ("success" == e) {
                C.websocketPort = R.websocketPort, C.webrtcPort = R.webrtcPort;
                var E = "wss://" + R.ip + ":" + R.websocketPort;
                V.connect(E)
            }
        })
    }, c.sigDisconnect = function (e) {
        null == e && (e = !0), a = e, null != V && (V.close(), V = null)
    }, c.createNew = function () {
        if (null != V) switch (I) {
            case"src":
                var e = "1";
                2 == _ && (e = "2");
                var R = AG_LIVESRCMOONSERVER.VE;
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructSrcProtocol(R, {
                    conCurrentNum: 7,
                    roomId: N.roomInfo.Name,
                    extra: e,
                    liveType: parseInt(e)
                })))
        }
    }, c.deleteCurrRoom = function () {
        if (null != V) switch (I) {
            case"src":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructSrcProtocol(AG_LIVESRCMOONSERVER.UE, {channelId: N.roomInfo.ID})))
        }
    }, c.createStream = function (e) {
        null == e && (e = {
            video: {
                width: {ideal: 640},
                height: {ideal: 480},
                frameRate: {ideal: 25},
                facingMode: {ideal: ["user"]}
            }, audio: {deviceId: {ideal: ["default"]}}
        }), T.createStream(e, G)
    }, c.joinRoom = function () {
        T.emit("ready", r, "voip" == I)
    }, c.joinRoomInternal = function (e) {
        switch (P = e, I) {
            case"src":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructWebrtcUploadMsgProtocol(e)));
                break;
            case"vdn":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.N, ACTION_GROUP_ID.P, StarRtc.AUtils.constructVdnProtocol(AG_LIVEVDNMOONSERVER.SO, e)));
                break;
            case"voip":
                "call" == A ? V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.I, ACTION_GROUP_ID.u, StarRtc.AUtils.constructVOIPProtocol(AG_VOIPMOONSERVER.MR, e))) : "response" == A && V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.I, ACTION_GROUP_ID.u, StarRtc.AUtils.constructVOIPProtocol(AG_VOIPMOONSERVER.PR, e)))
        }
    }, c.leaveRoom = function (e) {
        if (null != V && 1 == V.readyState()) switch (I) {
            case"src":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructSrcProtocol(AG_LIVESRCMOONSERVER.pE, {channelId: N.roomInfo.ID})));
                break;
            case"vdn":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.N, ACTION_GROUP_ID.P, StarRtc.AUtils.constructVdnProtocol(AG_LIVEVDNMOONSERVER.NO, {})));
            case"voip":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.I, ACTION_GROUP_ID.u, StarRtc.AUtils.constructVOIPProtocol(AG_VOIPMOONSERVER.LR, {isActive: e ? 0 : 1})))
        }
    }, c.streamConfigChange = function (e) {
        if (null != V) {
            s == e ? (s = n, n = e) : (n = s, s = e);
            var R = T.getStreamInfos(), E = [];
            for (var O in R) {
                var t = 0;
                t = n == s ? R[O].switchFlag ? 1 : 2 : O == n ? 1 : O == s ? 2 : R[O].switchFlag ? 2 : 1, E.push(t)
            }
            switch (I) {
                case"src":
                    V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructSrcProtocol(AG_LIVESRCMOONSERVER.vE, {streamConfig: E})));
                    break;
                case"vdn":
                    V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.N, ACTION_GROUP_ID.P, StarRtc.AUtils.constructVdnProtocol(AG_LIVEVDNMOONSERVER.AO, {streamConfig: E})))
            }
        }
    }, c.getState = function () {
        return null != V ? V.readyState() : -1
    }, c.getType = function () {
        return I
    }, c.sendStreamData = function (e) {
        switch (I) {
            case"src":
                V.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.i, ACTION_GROUP_ID.P, StarRtc.AUtils.constructSrcProtocol(AG_LIVESRCMOONSERVER.bE, {
                    streamData: e,
                    streamDataType: 8
                })))
        }
    }, c.activeDisconnect = function () {
        return a
    }, c
}, StarRtc.StarChatSDK = function (e, R, E) {
    var O = this, t = "", _ = "", a = {}, r = E, n = R, s = e, c = null, S = 0, i = !1, N = function (e, R) {
        switch (e.userData = r, e.obj = O, R) {
            case"connect success":
                var E;
                E = StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructHeartBeatMsg(AG_CHATROOMMOONSERVER.me)), c.startHeartBeat(E), n(e, R, s);
                break;
            case"connect failed":
            case"connect closed":
                c = null, n(e, R, s);
                break;
            case"onmessage":
                StarRtc.AUtils.parseProtocol(e, function (e) {
                    e.appid == APP_PRODUCT_ID.O && StarRtc.AUtils.parseChatMoonServerMessage(e.msgArr, function (e) {
                        N(e, "onChatRoomMessage")
                    })
                });
                break;
            case"onChatRoomMessage":
                switch (e.type) {
                    case"createChatRoom":
                        "success" == e.status && (r.roomInfo.ID = e.chatroomId, r.roomInfo.Creator = t);
                        break;
                    case"deleteChatRoom":
                    case"joinChatRoom":
                        e.status;
                        break;
                    case"recvChatPrivateMsg":
                    case"recvChatMsg":
                        if ("" == e.fromUserId || "" == e.msg) return;
                        if (e.msg = JSON.parse(e.msg), e.msg.fromId == t) return
                }
                n(e, R, s)
        }
    };
    return O.login = function (e, R, E) {
        _ = e + "_" + (t = R), E
    }, O.sigConnect = function () {
        if (i = !1, StarRtc.Instance.configModePulic) {
            var e = "https://" + StarRtc.Instance.chatRoomScheduleUrl + ":" + StarRtc.Instance.chatRoomSchedulePort + "/?userId=" + _;
            (c = new StarRtc.WebrtcWebsocket(N, e)).starConnect(function (e, R) {
                if ("success" == e) {
                    var E = R.split(":");
                    a.ip = E[0], a.port = E[1];
                    var O = "wss://" + a.ip + ":" + a.port;
                    c.connect(O)
                }
            })
        } else {
            c = new StarRtc.WebrtcWebsocket(N, null), a.ip = StarRtc.Instance.chatRoomServerUrl, a.port = StarRtc.Instance.chatRoomServerWebsocketPort;
            var R = "wss://" + a.ip + ":" + a.port;
            c.connect(R)
        }
    }, O.sigDisconnect = function (e) {
        null == e && (e = !0), i = e, null != c && (c.close(), c = null)
    }, O.createNew = function () {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.be, {
            roomType: 0 == r.roomInfo.Type ? 1 : 2,
            conCurrentNum: 100,
            userDefineData: r.roomInfo.Name
        })))
    }, O.sendChatMsg = function (e) {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.Ye, {
            roomId: r.roomInfo.ID,
            digest: "新消息",
            msgIndex: ++S,
            msg: e
        })))
    }, O.sendChatPrivateMsg = function (e, R) {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.xe, {
            toUserId: e,
            roomId: r.roomInfo.ID,
            digest: "新消息",
            msgIndex: ++S,
            msg: R,
            type: "1",
            code: "0"
        })))
    }, O.sendChatCtrlPrivateMsg = function (e, R, E) {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.xe, {
            toUserId: e,
            roomId: r.roomInfo.ID,
            digest: "新消息",
            msgIndex: ++S,
            msg: R,
            type: "0",
            code: E
        })))
    }, O.kickOutUser = function (e) {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.ge, {kickOutUserId: e})))
    }, O.banToSendMsg = function (e, R) {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.He, {
            banUserId: e,
            banTime: R
        })))
    }, O.getRoomOnlineNum = function () {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.Fe, {roomId: r.roomInfo.ID})))
    }, O.deleteCurrRoom = function () {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.ke)))
    }, O.joinRoom = function () {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.ye, {roomId: r.roomInfo.ID})))
    }, O.leaveRoom = function () {
        c.send(StarRtc.AUtils.packageProtocol(APP_PRODUCT_ID.O, ACTION_GROUP_ID.M, StarRtc.AUtils.constructChatProtocol(AG_CHATROOMMOONSERVER.he)))
    }, O.getState = function () {
        return null != c ? c.readyState() : -1
    }, O.activeDisconnect = function () {
        return i
    }, O
};